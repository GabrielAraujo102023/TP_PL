Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statement statements
Rule 4     statement -> function
Rule 5     statement -> condition_construct
Rule 6     statement -> operation
Rule 7     statement -> comparison
Rule 8     statement -> forth_function
Rule 9     statement -> words
Rule 10    statement -> num
Rule 11    condition_construct -> comparison IF statements THEN
Rule 12    condition_construct -> comparison IF statements ELSE statements THEN
Rule 13    function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
Rule 14    function -> : WORD function_body ;
Rule 15    function_body -> statements
Rule 16    arguments -> arguments WORD
Rule 17    arguments -> WORD
Rule 18    operation -> ARITHMETIC_OP
Rule 19    comparison -> COMPARISON
Rule 20    num -> INT
Rule 21    num -> FLOAT
Rule 22    words -> WORD
Rule 23    forth_function -> DOT
Rule 24    forth_function -> DOT_QUOTE
Rule 25    forth_function -> CHAR
Rule 26    forth_function -> EMIT
Rule 27    forth_function -> DUP
Rule 28    forth_function -> SWAP
Rule 29    forth_function -> CR
Rule 30    forth_function -> KEY
Rule 31    forth_function -> DROP

Terminals, with rules where they appear

(                    : 13
)                    : 13
:                    : 13 14
;                    : 13 14
ARITHMETIC_OP        : 18
CHAR                 : 25
COMPARISON           : 19
CR                   : 29
DOT                  : 23
DOT_QUOTE            : 24
DOUBLE_HIFEN         : 13
DROP                 : 31
DUP                  : 27
ELSE                 : 12
EMIT                 : 26
FLOAT                : 21
IF                   : 11 12
INT                  : 20
KEY                  : 30
SWAP                 : 28
THEN                 : 11 12
WORD                 : 13 13 14 16 17 22
error                : 

Nonterminals, with rules where they appear

arguments            : 13 16
comparison           : 7 11 12
condition_construct  : 5
forth_function       : 8
function             : 4
function_body        : 13 14
num                  : 10
operation            : 6
program              : 0
statement            : 2 3
statements           : 1 3 11 12 12 15
words                : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . function
    (5) statement -> . condition_construct
    (6) statement -> . operation
    (7) statement -> . comparison
    (8) statement -> . forth_function
    (9) statement -> . words
    (10) statement -> . num
    (13) function -> . : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> . : WORD function_body ;
    (11) condition_construct -> . comparison IF statements THEN
    (12) condition_construct -> . comparison IF statements ELSE statements THEN
    (18) operation -> . ARITHMETIC_OP
    (19) comparison -> . COMPARISON
    (23) forth_function -> . DOT
    (24) forth_function -> . DOT_QUOTE
    (25) forth_function -> . CHAR
    (26) forth_function -> . EMIT
    (27) forth_function -> . DUP
    (28) forth_function -> . SWAP
    (29) forth_function -> . CR
    (30) forth_function -> . KEY
    (31) forth_function -> . DROP
    (22) words -> . WORD
    (20) num -> . INT
    (21) num -> . FLOAT

    :               shift and go to state 11
    ARITHMETIC_OP   shift and go to state 13
    COMPARISON      shift and go to state 14
    DOT             shift and go to state 15
    DOT_QUOTE       shift and go to state 16
    CHAR            shift and go to state 17
    EMIT            shift and go to state 18
    DUP             shift and go to state 19
    SWAP            shift and go to state 20
    CR              shift and go to state 21
    KEY             shift and go to state 22
    DROP            shift and go to state 23
    WORD            shift and go to state 12
    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    function                       shift and go to state 4
    condition_construct            shift and go to state 5
    operation                      shift and go to state 6
    comparison                     shift and go to state 7
    forth_function                 shift and go to state 8
    words                          shift and go to state 9
    num                            shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement .
    (3) statements -> statement . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . function
    (5) statement -> . condition_construct
    (6) statement -> . operation
    (7) statement -> . comparison
    (8) statement -> . forth_function
    (9) statement -> . words
    (10) statement -> . num
    (13) function -> . : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> . : WORD function_body ;
    (11) condition_construct -> . comparison IF statements THEN
    (12) condition_construct -> . comparison IF statements ELSE statements THEN
    (18) operation -> . ARITHMETIC_OP
    (19) comparison -> . COMPARISON
    (23) forth_function -> . DOT
    (24) forth_function -> . DOT_QUOTE
    (25) forth_function -> . CHAR
    (26) forth_function -> . EMIT
    (27) forth_function -> . DUP
    (28) forth_function -> . SWAP
    (29) forth_function -> . CR
    (30) forth_function -> . KEY
    (31) forth_function -> . DROP
    (22) words -> . WORD
    (20) num -> . INT
    (21) num -> . FLOAT

    $end            reduce using rule 2 (statements -> statement .)
    THEN            reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    ;               reduce using rule 2 (statements -> statement .)
    :               shift and go to state 11
    ARITHMETIC_OP   shift and go to state 13
    COMPARISON      shift and go to state 14
    DOT             shift and go to state 15
    DOT_QUOTE       shift and go to state 16
    CHAR            shift and go to state 17
    EMIT            shift and go to state 18
    DUP             shift and go to state 19
    SWAP            shift and go to state 20
    CR              shift and go to state 21
    KEY             shift and go to state 22
    DROP            shift and go to state 23
    WORD            shift and go to state 12
    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    statement                      shift and go to state 3
    statements                     shift and go to state 26
    function                       shift and go to state 4
    condition_construct            shift and go to state 5
    operation                      shift and go to state 6
    comparison                     shift and go to state 7
    forth_function                 shift and go to state 8
    words                          shift and go to state 9
    num                            shift and go to state 10

state 4

    (4) statement -> function .

    :               reduce using rule 4 (statement -> function .)
    ARITHMETIC_OP   reduce using rule 4 (statement -> function .)
    COMPARISON      reduce using rule 4 (statement -> function .)
    DOT             reduce using rule 4 (statement -> function .)
    DOT_QUOTE       reduce using rule 4 (statement -> function .)
    CHAR            reduce using rule 4 (statement -> function .)
    EMIT            reduce using rule 4 (statement -> function .)
    DUP             reduce using rule 4 (statement -> function .)
    SWAP            reduce using rule 4 (statement -> function .)
    CR              reduce using rule 4 (statement -> function .)
    KEY             reduce using rule 4 (statement -> function .)
    DROP            reduce using rule 4 (statement -> function .)
    WORD            reduce using rule 4 (statement -> function .)
    INT             reduce using rule 4 (statement -> function .)
    FLOAT           reduce using rule 4 (statement -> function .)
    $end            reduce using rule 4 (statement -> function .)
    THEN            reduce using rule 4 (statement -> function .)
    ELSE            reduce using rule 4 (statement -> function .)
    ;               reduce using rule 4 (statement -> function .)


state 5

    (5) statement -> condition_construct .

    :               reduce using rule 5 (statement -> condition_construct .)
    ARITHMETIC_OP   reduce using rule 5 (statement -> condition_construct .)
    COMPARISON      reduce using rule 5 (statement -> condition_construct .)
    DOT             reduce using rule 5 (statement -> condition_construct .)
    DOT_QUOTE       reduce using rule 5 (statement -> condition_construct .)
    CHAR            reduce using rule 5 (statement -> condition_construct .)
    EMIT            reduce using rule 5 (statement -> condition_construct .)
    DUP             reduce using rule 5 (statement -> condition_construct .)
    SWAP            reduce using rule 5 (statement -> condition_construct .)
    CR              reduce using rule 5 (statement -> condition_construct .)
    KEY             reduce using rule 5 (statement -> condition_construct .)
    DROP            reduce using rule 5 (statement -> condition_construct .)
    WORD            reduce using rule 5 (statement -> condition_construct .)
    INT             reduce using rule 5 (statement -> condition_construct .)
    FLOAT           reduce using rule 5 (statement -> condition_construct .)
    $end            reduce using rule 5 (statement -> condition_construct .)
    THEN            reduce using rule 5 (statement -> condition_construct .)
    ELSE            reduce using rule 5 (statement -> condition_construct .)
    ;               reduce using rule 5 (statement -> condition_construct .)


state 6

    (6) statement -> operation .

    :               reduce using rule 6 (statement -> operation .)
    ARITHMETIC_OP   reduce using rule 6 (statement -> operation .)
    COMPARISON      reduce using rule 6 (statement -> operation .)
    DOT             reduce using rule 6 (statement -> operation .)
    DOT_QUOTE       reduce using rule 6 (statement -> operation .)
    CHAR            reduce using rule 6 (statement -> operation .)
    EMIT            reduce using rule 6 (statement -> operation .)
    DUP             reduce using rule 6 (statement -> operation .)
    SWAP            reduce using rule 6 (statement -> operation .)
    CR              reduce using rule 6 (statement -> operation .)
    KEY             reduce using rule 6 (statement -> operation .)
    DROP            reduce using rule 6 (statement -> operation .)
    WORD            reduce using rule 6 (statement -> operation .)
    INT             reduce using rule 6 (statement -> operation .)
    FLOAT           reduce using rule 6 (statement -> operation .)
    $end            reduce using rule 6 (statement -> operation .)
    THEN            reduce using rule 6 (statement -> operation .)
    ELSE            reduce using rule 6 (statement -> operation .)
    ;               reduce using rule 6 (statement -> operation .)


state 7

    (7) statement -> comparison .
    (11) condition_construct -> comparison . IF statements THEN
    (12) condition_construct -> comparison . IF statements ELSE statements THEN

    :               reduce using rule 7 (statement -> comparison .)
    ARITHMETIC_OP   reduce using rule 7 (statement -> comparison .)
    COMPARISON      reduce using rule 7 (statement -> comparison .)
    DOT             reduce using rule 7 (statement -> comparison .)
    DOT_QUOTE       reduce using rule 7 (statement -> comparison .)
    CHAR            reduce using rule 7 (statement -> comparison .)
    EMIT            reduce using rule 7 (statement -> comparison .)
    DUP             reduce using rule 7 (statement -> comparison .)
    SWAP            reduce using rule 7 (statement -> comparison .)
    CR              reduce using rule 7 (statement -> comparison .)
    KEY             reduce using rule 7 (statement -> comparison .)
    DROP            reduce using rule 7 (statement -> comparison .)
    WORD            reduce using rule 7 (statement -> comparison .)
    INT             reduce using rule 7 (statement -> comparison .)
    FLOAT           reduce using rule 7 (statement -> comparison .)
    $end            reduce using rule 7 (statement -> comparison .)
    THEN            reduce using rule 7 (statement -> comparison .)
    ELSE            reduce using rule 7 (statement -> comparison .)
    ;               reduce using rule 7 (statement -> comparison .)
    IF              shift and go to state 27


state 8

    (8) statement -> forth_function .

    :               reduce using rule 8 (statement -> forth_function .)
    ARITHMETIC_OP   reduce using rule 8 (statement -> forth_function .)
    COMPARISON      reduce using rule 8 (statement -> forth_function .)
    DOT             reduce using rule 8 (statement -> forth_function .)
    DOT_QUOTE       reduce using rule 8 (statement -> forth_function .)
    CHAR            reduce using rule 8 (statement -> forth_function .)
    EMIT            reduce using rule 8 (statement -> forth_function .)
    DUP             reduce using rule 8 (statement -> forth_function .)
    SWAP            reduce using rule 8 (statement -> forth_function .)
    CR              reduce using rule 8 (statement -> forth_function .)
    KEY             reduce using rule 8 (statement -> forth_function .)
    DROP            reduce using rule 8 (statement -> forth_function .)
    WORD            reduce using rule 8 (statement -> forth_function .)
    INT             reduce using rule 8 (statement -> forth_function .)
    FLOAT           reduce using rule 8 (statement -> forth_function .)
    $end            reduce using rule 8 (statement -> forth_function .)
    THEN            reduce using rule 8 (statement -> forth_function .)
    ELSE            reduce using rule 8 (statement -> forth_function .)
    ;               reduce using rule 8 (statement -> forth_function .)


state 9

    (9) statement -> words .

    :               reduce using rule 9 (statement -> words .)
    ARITHMETIC_OP   reduce using rule 9 (statement -> words .)
    COMPARISON      reduce using rule 9 (statement -> words .)
    DOT             reduce using rule 9 (statement -> words .)
    DOT_QUOTE       reduce using rule 9 (statement -> words .)
    CHAR            reduce using rule 9 (statement -> words .)
    EMIT            reduce using rule 9 (statement -> words .)
    DUP             reduce using rule 9 (statement -> words .)
    SWAP            reduce using rule 9 (statement -> words .)
    CR              reduce using rule 9 (statement -> words .)
    KEY             reduce using rule 9 (statement -> words .)
    DROP            reduce using rule 9 (statement -> words .)
    WORD            reduce using rule 9 (statement -> words .)
    INT             reduce using rule 9 (statement -> words .)
    FLOAT           reduce using rule 9 (statement -> words .)
    $end            reduce using rule 9 (statement -> words .)
    THEN            reduce using rule 9 (statement -> words .)
    ELSE            reduce using rule 9 (statement -> words .)
    ;               reduce using rule 9 (statement -> words .)


state 10

    (10) statement -> num .

    :               reduce using rule 10 (statement -> num .)
    ARITHMETIC_OP   reduce using rule 10 (statement -> num .)
    COMPARISON      reduce using rule 10 (statement -> num .)
    DOT             reduce using rule 10 (statement -> num .)
    DOT_QUOTE       reduce using rule 10 (statement -> num .)
    CHAR            reduce using rule 10 (statement -> num .)
    EMIT            reduce using rule 10 (statement -> num .)
    DUP             reduce using rule 10 (statement -> num .)
    SWAP            reduce using rule 10 (statement -> num .)
    CR              reduce using rule 10 (statement -> num .)
    KEY             reduce using rule 10 (statement -> num .)
    DROP            reduce using rule 10 (statement -> num .)
    WORD            reduce using rule 10 (statement -> num .)
    INT             reduce using rule 10 (statement -> num .)
    FLOAT           reduce using rule 10 (statement -> num .)
    $end            reduce using rule 10 (statement -> num .)
    THEN            reduce using rule 10 (statement -> num .)
    ELSE            reduce using rule 10 (statement -> num .)
    ;               reduce using rule 10 (statement -> num .)


state 11

    (13) function -> : . WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> : . WORD function_body ;

    WORD            shift and go to state 28


state 12

    (22) words -> WORD .

    :               reduce using rule 22 (words -> WORD .)
    ARITHMETIC_OP   reduce using rule 22 (words -> WORD .)
    COMPARISON      reduce using rule 22 (words -> WORD .)
    DOT             reduce using rule 22 (words -> WORD .)
    DOT_QUOTE       reduce using rule 22 (words -> WORD .)
    CHAR            reduce using rule 22 (words -> WORD .)
    EMIT            reduce using rule 22 (words -> WORD .)
    DUP             reduce using rule 22 (words -> WORD .)
    SWAP            reduce using rule 22 (words -> WORD .)
    CR              reduce using rule 22 (words -> WORD .)
    KEY             reduce using rule 22 (words -> WORD .)
    DROP            reduce using rule 22 (words -> WORD .)
    WORD            reduce using rule 22 (words -> WORD .)
    INT             reduce using rule 22 (words -> WORD .)
    FLOAT           reduce using rule 22 (words -> WORD .)
    $end            reduce using rule 22 (words -> WORD .)
    THEN            reduce using rule 22 (words -> WORD .)
    ELSE            reduce using rule 22 (words -> WORD .)
    ;               reduce using rule 22 (words -> WORD .)


state 13

    (18) operation -> ARITHMETIC_OP .

    :               reduce using rule 18 (operation -> ARITHMETIC_OP .)
    ARITHMETIC_OP   reduce using rule 18 (operation -> ARITHMETIC_OP .)
    COMPARISON      reduce using rule 18 (operation -> ARITHMETIC_OP .)
    DOT             reduce using rule 18 (operation -> ARITHMETIC_OP .)
    DOT_QUOTE       reduce using rule 18 (operation -> ARITHMETIC_OP .)
    CHAR            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    EMIT            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    DUP             reduce using rule 18 (operation -> ARITHMETIC_OP .)
    SWAP            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    CR              reduce using rule 18 (operation -> ARITHMETIC_OP .)
    KEY             reduce using rule 18 (operation -> ARITHMETIC_OP .)
    DROP            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    WORD            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    INT             reduce using rule 18 (operation -> ARITHMETIC_OP .)
    FLOAT           reduce using rule 18 (operation -> ARITHMETIC_OP .)
    $end            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    THEN            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    ELSE            reduce using rule 18 (operation -> ARITHMETIC_OP .)
    ;               reduce using rule 18 (operation -> ARITHMETIC_OP .)


state 14

    (19) comparison -> COMPARISON .

    IF              reduce using rule 19 (comparison -> COMPARISON .)
    :               reduce using rule 19 (comparison -> COMPARISON .)
    ARITHMETIC_OP   reduce using rule 19 (comparison -> COMPARISON .)
    COMPARISON      reduce using rule 19 (comparison -> COMPARISON .)
    DOT             reduce using rule 19 (comparison -> COMPARISON .)
    DOT_QUOTE       reduce using rule 19 (comparison -> COMPARISON .)
    CHAR            reduce using rule 19 (comparison -> COMPARISON .)
    EMIT            reduce using rule 19 (comparison -> COMPARISON .)
    DUP             reduce using rule 19 (comparison -> COMPARISON .)
    SWAP            reduce using rule 19 (comparison -> COMPARISON .)
    CR              reduce using rule 19 (comparison -> COMPARISON .)
    KEY             reduce using rule 19 (comparison -> COMPARISON .)
    DROP            reduce using rule 19 (comparison -> COMPARISON .)
    WORD            reduce using rule 19 (comparison -> COMPARISON .)
    INT             reduce using rule 19 (comparison -> COMPARISON .)
    FLOAT           reduce using rule 19 (comparison -> COMPARISON .)
    $end            reduce using rule 19 (comparison -> COMPARISON .)
    THEN            reduce using rule 19 (comparison -> COMPARISON .)
    ELSE            reduce using rule 19 (comparison -> COMPARISON .)
    ;               reduce using rule 19 (comparison -> COMPARISON .)


state 15

    (23) forth_function -> DOT .

    :               reduce using rule 23 (forth_function -> DOT .)
    ARITHMETIC_OP   reduce using rule 23 (forth_function -> DOT .)
    COMPARISON      reduce using rule 23 (forth_function -> DOT .)
    DOT             reduce using rule 23 (forth_function -> DOT .)
    DOT_QUOTE       reduce using rule 23 (forth_function -> DOT .)
    CHAR            reduce using rule 23 (forth_function -> DOT .)
    EMIT            reduce using rule 23 (forth_function -> DOT .)
    DUP             reduce using rule 23 (forth_function -> DOT .)
    SWAP            reduce using rule 23 (forth_function -> DOT .)
    CR              reduce using rule 23 (forth_function -> DOT .)
    KEY             reduce using rule 23 (forth_function -> DOT .)
    DROP            reduce using rule 23 (forth_function -> DOT .)
    WORD            reduce using rule 23 (forth_function -> DOT .)
    INT             reduce using rule 23 (forth_function -> DOT .)
    FLOAT           reduce using rule 23 (forth_function -> DOT .)
    $end            reduce using rule 23 (forth_function -> DOT .)
    THEN            reduce using rule 23 (forth_function -> DOT .)
    ELSE            reduce using rule 23 (forth_function -> DOT .)
    ;               reduce using rule 23 (forth_function -> DOT .)


state 16

    (24) forth_function -> DOT_QUOTE .

    :               reduce using rule 24 (forth_function -> DOT_QUOTE .)
    ARITHMETIC_OP   reduce using rule 24 (forth_function -> DOT_QUOTE .)
    COMPARISON      reduce using rule 24 (forth_function -> DOT_QUOTE .)
    DOT             reduce using rule 24 (forth_function -> DOT_QUOTE .)
    DOT_QUOTE       reduce using rule 24 (forth_function -> DOT_QUOTE .)
    CHAR            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    EMIT            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    DUP             reduce using rule 24 (forth_function -> DOT_QUOTE .)
    SWAP            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    CR              reduce using rule 24 (forth_function -> DOT_QUOTE .)
    KEY             reduce using rule 24 (forth_function -> DOT_QUOTE .)
    DROP            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    WORD            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    INT             reduce using rule 24 (forth_function -> DOT_QUOTE .)
    FLOAT           reduce using rule 24 (forth_function -> DOT_QUOTE .)
    $end            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    THEN            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    ELSE            reduce using rule 24 (forth_function -> DOT_QUOTE .)
    ;               reduce using rule 24 (forth_function -> DOT_QUOTE .)


state 17

    (25) forth_function -> CHAR .

    :               reduce using rule 25 (forth_function -> CHAR .)
    ARITHMETIC_OP   reduce using rule 25 (forth_function -> CHAR .)
    COMPARISON      reduce using rule 25 (forth_function -> CHAR .)
    DOT             reduce using rule 25 (forth_function -> CHAR .)
    DOT_QUOTE       reduce using rule 25 (forth_function -> CHAR .)
    CHAR            reduce using rule 25 (forth_function -> CHAR .)
    EMIT            reduce using rule 25 (forth_function -> CHAR .)
    DUP             reduce using rule 25 (forth_function -> CHAR .)
    SWAP            reduce using rule 25 (forth_function -> CHAR .)
    CR              reduce using rule 25 (forth_function -> CHAR .)
    KEY             reduce using rule 25 (forth_function -> CHAR .)
    DROP            reduce using rule 25 (forth_function -> CHAR .)
    WORD            reduce using rule 25 (forth_function -> CHAR .)
    INT             reduce using rule 25 (forth_function -> CHAR .)
    FLOAT           reduce using rule 25 (forth_function -> CHAR .)
    $end            reduce using rule 25 (forth_function -> CHAR .)
    THEN            reduce using rule 25 (forth_function -> CHAR .)
    ELSE            reduce using rule 25 (forth_function -> CHAR .)
    ;               reduce using rule 25 (forth_function -> CHAR .)


state 18

    (26) forth_function -> EMIT .

    :               reduce using rule 26 (forth_function -> EMIT .)
    ARITHMETIC_OP   reduce using rule 26 (forth_function -> EMIT .)
    COMPARISON      reduce using rule 26 (forth_function -> EMIT .)
    DOT             reduce using rule 26 (forth_function -> EMIT .)
    DOT_QUOTE       reduce using rule 26 (forth_function -> EMIT .)
    CHAR            reduce using rule 26 (forth_function -> EMIT .)
    EMIT            reduce using rule 26 (forth_function -> EMIT .)
    DUP             reduce using rule 26 (forth_function -> EMIT .)
    SWAP            reduce using rule 26 (forth_function -> EMIT .)
    CR              reduce using rule 26 (forth_function -> EMIT .)
    KEY             reduce using rule 26 (forth_function -> EMIT .)
    DROP            reduce using rule 26 (forth_function -> EMIT .)
    WORD            reduce using rule 26 (forth_function -> EMIT .)
    INT             reduce using rule 26 (forth_function -> EMIT .)
    FLOAT           reduce using rule 26 (forth_function -> EMIT .)
    $end            reduce using rule 26 (forth_function -> EMIT .)
    THEN            reduce using rule 26 (forth_function -> EMIT .)
    ELSE            reduce using rule 26 (forth_function -> EMIT .)
    ;               reduce using rule 26 (forth_function -> EMIT .)


state 19

    (27) forth_function -> DUP .

    :               reduce using rule 27 (forth_function -> DUP .)
    ARITHMETIC_OP   reduce using rule 27 (forth_function -> DUP .)
    COMPARISON      reduce using rule 27 (forth_function -> DUP .)
    DOT             reduce using rule 27 (forth_function -> DUP .)
    DOT_QUOTE       reduce using rule 27 (forth_function -> DUP .)
    CHAR            reduce using rule 27 (forth_function -> DUP .)
    EMIT            reduce using rule 27 (forth_function -> DUP .)
    DUP             reduce using rule 27 (forth_function -> DUP .)
    SWAP            reduce using rule 27 (forth_function -> DUP .)
    CR              reduce using rule 27 (forth_function -> DUP .)
    KEY             reduce using rule 27 (forth_function -> DUP .)
    DROP            reduce using rule 27 (forth_function -> DUP .)
    WORD            reduce using rule 27 (forth_function -> DUP .)
    INT             reduce using rule 27 (forth_function -> DUP .)
    FLOAT           reduce using rule 27 (forth_function -> DUP .)
    $end            reduce using rule 27 (forth_function -> DUP .)
    THEN            reduce using rule 27 (forth_function -> DUP .)
    ELSE            reduce using rule 27 (forth_function -> DUP .)
    ;               reduce using rule 27 (forth_function -> DUP .)


state 20

    (28) forth_function -> SWAP .

    :               reduce using rule 28 (forth_function -> SWAP .)
    ARITHMETIC_OP   reduce using rule 28 (forth_function -> SWAP .)
    COMPARISON      reduce using rule 28 (forth_function -> SWAP .)
    DOT             reduce using rule 28 (forth_function -> SWAP .)
    DOT_QUOTE       reduce using rule 28 (forth_function -> SWAP .)
    CHAR            reduce using rule 28 (forth_function -> SWAP .)
    EMIT            reduce using rule 28 (forth_function -> SWAP .)
    DUP             reduce using rule 28 (forth_function -> SWAP .)
    SWAP            reduce using rule 28 (forth_function -> SWAP .)
    CR              reduce using rule 28 (forth_function -> SWAP .)
    KEY             reduce using rule 28 (forth_function -> SWAP .)
    DROP            reduce using rule 28 (forth_function -> SWAP .)
    WORD            reduce using rule 28 (forth_function -> SWAP .)
    INT             reduce using rule 28 (forth_function -> SWAP .)
    FLOAT           reduce using rule 28 (forth_function -> SWAP .)
    $end            reduce using rule 28 (forth_function -> SWAP .)
    THEN            reduce using rule 28 (forth_function -> SWAP .)
    ELSE            reduce using rule 28 (forth_function -> SWAP .)
    ;               reduce using rule 28 (forth_function -> SWAP .)


state 21

    (29) forth_function -> CR .

    :               reduce using rule 29 (forth_function -> CR .)
    ARITHMETIC_OP   reduce using rule 29 (forth_function -> CR .)
    COMPARISON      reduce using rule 29 (forth_function -> CR .)
    DOT             reduce using rule 29 (forth_function -> CR .)
    DOT_QUOTE       reduce using rule 29 (forth_function -> CR .)
    CHAR            reduce using rule 29 (forth_function -> CR .)
    EMIT            reduce using rule 29 (forth_function -> CR .)
    DUP             reduce using rule 29 (forth_function -> CR .)
    SWAP            reduce using rule 29 (forth_function -> CR .)
    CR              reduce using rule 29 (forth_function -> CR .)
    KEY             reduce using rule 29 (forth_function -> CR .)
    DROP            reduce using rule 29 (forth_function -> CR .)
    WORD            reduce using rule 29 (forth_function -> CR .)
    INT             reduce using rule 29 (forth_function -> CR .)
    FLOAT           reduce using rule 29 (forth_function -> CR .)
    $end            reduce using rule 29 (forth_function -> CR .)
    THEN            reduce using rule 29 (forth_function -> CR .)
    ELSE            reduce using rule 29 (forth_function -> CR .)
    ;               reduce using rule 29 (forth_function -> CR .)


state 22

    (30) forth_function -> KEY .

    :               reduce using rule 30 (forth_function -> KEY .)
    ARITHMETIC_OP   reduce using rule 30 (forth_function -> KEY .)
    COMPARISON      reduce using rule 30 (forth_function -> KEY .)
    DOT             reduce using rule 30 (forth_function -> KEY .)
    DOT_QUOTE       reduce using rule 30 (forth_function -> KEY .)
    CHAR            reduce using rule 30 (forth_function -> KEY .)
    EMIT            reduce using rule 30 (forth_function -> KEY .)
    DUP             reduce using rule 30 (forth_function -> KEY .)
    SWAP            reduce using rule 30 (forth_function -> KEY .)
    CR              reduce using rule 30 (forth_function -> KEY .)
    KEY             reduce using rule 30 (forth_function -> KEY .)
    DROP            reduce using rule 30 (forth_function -> KEY .)
    WORD            reduce using rule 30 (forth_function -> KEY .)
    INT             reduce using rule 30 (forth_function -> KEY .)
    FLOAT           reduce using rule 30 (forth_function -> KEY .)
    $end            reduce using rule 30 (forth_function -> KEY .)
    THEN            reduce using rule 30 (forth_function -> KEY .)
    ELSE            reduce using rule 30 (forth_function -> KEY .)
    ;               reduce using rule 30 (forth_function -> KEY .)


state 23

    (31) forth_function -> DROP .

    :               reduce using rule 31 (forth_function -> DROP .)
    ARITHMETIC_OP   reduce using rule 31 (forth_function -> DROP .)
    COMPARISON      reduce using rule 31 (forth_function -> DROP .)
    DOT             reduce using rule 31 (forth_function -> DROP .)
    DOT_QUOTE       reduce using rule 31 (forth_function -> DROP .)
    CHAR            reduce using rule 31 (forth_function -> DROP .)
    EMIT            reduce using rule 31 (forth_function -> DROP .)
    DUP             reduce using rule 31 (forth_function -> DROP .)
    SWAP            reduce using rule 31 (forth_function -> DROP .)
    CR              reduce using rule 31 (forth_function -> DROP .)
    KEY             reduce using rule 31 (forth_function -> DROP .)
    DROP            reduce using rule 31 (forth_function -> DROP .)
    WORD            reduce using rule 31 (forth_function -> DROP .)
    INT             reduce using rule 31 (forth_function -> DROP .)
    FLOAT           reduce using rule 31 (forth_function -> DROP .)
    $end            reduce using rule 31 (forth_function -> DROP .)
    THEN            reduce using rule 31 (forth_function -> DROP .)
    ELSE            reduce using rule 31 (forth_function -> DROP .)
    ;               reduce using rule 31 (forth_function -> DROP .)


state 24

    (20) num -> INT .

    :               reduce using rule 20 (num -> INT .)
    ARITHMETIC_OP   reduce using rule 20 (num -> INT .)
    COMPARISON      reduce using rule 20 (num -> INT .)
    DOT             reduce using rule 20 (num -> INT .)
    DOT_QUOTE       reduce using rule 20 (num -> INT .)
    CHAR            reduce using rule 20 (num -> INT .)
    EMIT            reduce using rule 20 (num -> INT .)
    DUP             reduce using rule 20 (num -> INT .)
    SWAP            reduce using rule 20 (num -> INT .)
    CR              reduce using rule 20 (num -> INT .)
    KEY             reduce using rule 20 (num -> INT .)
    DROP            reduce using rule 20 (num -> INT .)
    WORD            reduce using rule 20 (num -> INT .)
    INT             reduce using rule 20 (num -> INT .)
    FLOAT           reduce using rule 20 (num -> INT .)
    $end            reduce using rule 20 (num -> INT .)
    THEN            reduce using rule 20 (num -> INT .)
    ELSE            reduce using rule 20 (num -> INT .)
    ;               reduce using rule 20 (num -> INT .)


state 25

    (21) num -> FLOAT .

    :               reduce using rule 21 (num -> FLOAT .)
    ARITHMETIC_OP   reduce using rule 21 (num -> FLOAT .)
    COMPARISON      reduce using rule 21 (num -> FLOAT .)
    DOT             reduce using rule 21 (num -> FLOAT .)
    DOT_QUOTE       reduce using rule 21 (num -> FLOAT .)
    CHAR            reduce using rule 21 (num -> FLOAT .)
    EMIT            reduce using rule 21 (num -> FLOAT .)
    DUP             reduce using rule 21 (num -> FLOAT .)
    SWAP            reduce using rule 21 (num -> FLOAT .)
    CR              reduce using rule 21 (num -> FLOAT .)
    KEY             reduce using rule 21 (num -> FLOAT .)
    DROP            reduce using rule 21 (num -> FLOAT .)
    WORD            reduce using rule 21 (num -> FLOAT .)
    INT             reduce using rule 21 (num -> FLOAT .)
    FLOAT           reduce using rule 21 (num -> FLOAT .)
    $end            reduce using rule 21 (num -> FLOAT .)
    THEN            reduce using rule 21 (num -> FLOAT .)
    ELSE            reduce using rule 21 (num -> FLOAT .)
    ;               reduce using rule 21 (num -> FLOAT .)


state 26

    (3) statements -> statement statements .

    $end            reduce using rule 3 (statements -> statement statements .)
    THEN            reduce using rule 3 (statements -> statement statements .)
    ELSE            reduce using rule 3 (statements -> statement statements .)
    ;               reduce using rule 3 (statements -> statement statements .)


state 27

    (11) condition_construct -> comparison IF . statements THEN
    (12) condition_construct -> comparison IF . statements ELSE statements THEN
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . function
    (5) statement -> . condition_construct
    (6) statement -> . operation
    (7) statement -> . comparison
    (8) statement -> . forth_function
    (9) statement -> . words
    (10) statement -> . num
    (13) function -> . : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> . : WORD function_body ;
    (11) condition_construct -> . comparison IF statements THEN
    (12) condition_construct -> . comparison IF statements ELSE statements THEN
    (18) operation -> . ARITHMETIC_OP
    (19) comparison -> . COMPARISON
    (23) forth_function -> . DOT
    (24) forth_function -> . DOT_QUOTE
    (25) forth_function -> . CHAR
    (26) forth_function -> . EMIT
    (27) forth_function -> . DUP
    (28) forth_function -> . SWAP
    (29) forth_function -> . CR
    (30) forth_function -> . KEY
    (31) forth_function -> . DROP
    (22) words -> . WORD
    (20) num -> . INT
    (21) num -> . FLOAT

    :               shift and go to state 11
    ARITHMETIC_OP   shift and go to state 13
    COMPARISON      shift and go to state 14
    DOT             shift and go to state 15
    DOT_QUOTE       shift and go to state 16
    CHAR            shift and go to state 17
    EMIT            shift and go to state 18
    DUP             shift and go to state 19
    SWAP            shift and go to state 20
    CR              shift and go to state 21
    KEY             shift and go to state 22
    DROP            shift and go to state 23
    WORD            shift and go to state 12
    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    comparison                     shift and go to state 7
    statements                     shift and go to state 29
    statement                      shift and go to state 3
    function                       shift and go to state 4
    condition_construct            shift and go to state 5
    operation                      shift and go to state 6
    forth_function                 shift and go to state 8
    words                          shift and go to state 9
    num                            shift and go to state 10

state 28

    (13) function -> : WORD . ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> : WORD . function_body ;
    (15) function_body -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . function
    (5) statement -> . condition_construct
    (6) statement -> . operation
    (7) statement -> . comparison
    (8) statement -> . forth_function
    (9) statement -> . words
    (10) statement -> . num
    (13) function -> . : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> . : WORD function_body ;
    (11) condition_construct -> . comparison IF statements THEN
    (12) condition_construct -> . comparison IF statements ELSE statements THEN
    (18) operation -> . ARITHMETIC_OP
    (19) comparison -> . COMPARISON
    (23) forth_function -> . DOT
    (24) forth_function -> . DOT_QUOTE
    (25) forth_function -> . CHAR
    (26) forth_function -> . EMIT
    (27) forth_function -> . DUP
    (28) forth_function -> . SWAP
    (29) forth_function -> . CR
    (30) forth_function -> . KEY
    (31) forth_function -> . DROP
    (22) words -> . WORD
    (20) num -> . INT
    (21) num -> . FLOAT

    (               shift and go to state 30
    :               shift and go to state 11
    ARITHMETIC_OP   shift and go to state 13
    COMPARISON      shift and go to state 14
    DOT             shift and go to state 15
    DOT_QUOTE       shift and go to state 16
    CHAR            shift and go to state 17
    EMIT            shift and go to state 18
    DUP             shift and go to state 19
    SWAP            shift and go to state 20
    CR              shift and go to state 21
    KEY             shift and go to state 22
    DROP            shift and go to state 23
    WORD            shift and go to state 12
    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    function_body                  shift and go to state 31
    statements                     shift and go to state 32
    statement                      shift and go to state 3
    function                       shift and go to state 4
    condition_construct            shift and go to state 5
    operation                      shift and go to state 6
    comparison                     shift and go to state 7
    forth_function                 shift and go to state 8
    words                          shift and go to state 9
    num                            shift and go to state 10

state 29

    (11) condition_construct -> comparison IF statements . THEN
    (12) condition_construct -> comparison IF statements . ELSE statements THEN

    THEN            shift and go to state 33
    ELSE            shift and go to state 34


state 30

    (13) function -> : WORD ( . arguments DOUBLE_HIFEN WORD ) function_body ;
    (16) arguments -> . arguments WORD
    (17) arguments -> . WORD

    WORD            shift and go to state 35

    arguments                      shift and go to state 36

state 31

    (14) function -> : WORD function_body . ;

    ;               shift and go to state 37


state 32

    (15) function_body -> statements .

    ;               reduce using rule 15 (function_body -> statements .)


state 33

    (11) condition_construct -> comparison IF statements THEN .

    :               reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    ARITHMETIC_OP   reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    COMPARISON      reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    DOT             reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    DOT_QUOTE       reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    CHAR            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    EMIT            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    DUP             reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    SWAP            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    CR              reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    KEY             reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    DROP            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    WORD            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    INT             reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    FLOAT           reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    $end            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    THEN            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    ELSE            reduce using rule 11 (condition_construct -> comparison IF statements THEN .)
    ;               reduce using rule 11 (condition_construct -> comparison IF statements THEN .)


state 34

    (12) condition_construct -> comparison IF statements ELSE . statements THEN
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . function
    (5) statement -> . condition_construct
    (6) statement -> . operation
    (7) statement -> . comparison
    (8) statement -> . forth_function
    (9) statement -> . words
    (10) statement -> . num
    (13) function -> . : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> . : WORD function_body ;
    (11) condition_construct -> . comparison IF statements THEN
    (12) condition_construct -> . comparison IF statements ELSE statements THEN
    (18) operation -> . ARITHMETIC_OP
    (19) comparison -> . COMPARISON
    (23) forth_function -> . DOT
    (24) forth_function -> . DOT_QUOTE
    (25) forth_function -> . CHAR
    (26) forth_function -> . EMIT
    (27) forth_function -> . DUP
    (28) forth_function -> . SWAP
    (29) forth_function -> . CR
    (30) forth_function -> . KEY
    (31) forth_function -> . DROP
    (22) words -> . WORD
    (20) num -> . INT
    (21) num -> . FLOAT

    :               shift and go to state 11
    ARITHMETIC_OP   shift and go to state 13
    COMPARISON      shift and go to state 14
    DOT             shift and go to state 15
    DOT_QUOTE       shift and go to state 16
    CHAR            shift and go to state 17
    EMIT            shift and go to state 18
    DUP             shift and go to state 19
    SWAP            shift and go to state 20
    CR              shift and go to state 21
    KEY             shift and go to state 22
    DROP            shift and go to state 23
    WORD            shift and go to state 12
    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    comparison                     shift and go to state 7
    statements                     shift and go to state 38
    statement                      shift and go to state 3
    function                       shift and go to state 4
    condition_construct            shift and go to state 5
    operation                      shift and go to state 6
    forth_function                 shift and go to state 8
    words                          shift and go to state 9
    num                            shift and go to state 10

state 35

    (17) arguments -> WORD .

    DOUBLE_HIFEN    reduce using rule 17 (arguments -> WORD .)
    WORD            reduce using rule 17 (arguments -> WORD .)


state 36

    (13) function -> : WORD ( arguments . DOUBLE_HIFEN WORD ) function_body ;
    (16) arguments -> arguments . WORD

    DOUBLE_HIFEN    shift and go to state 40
    WORD            shift and go to state 39


state 37

    (14) function -> : WORD function_body ; .

    :               reduce using rule 14 (function -> : WORD function_body ; .)
    ARITHMETIC_OP   reduce using rule 14 (function -> : WORD function_body ; .)
    COMPARISON      reduce using rule 14 (function -> : WORD function_body ; .)
    DOT             reduce using rule 14 (function -> : WORD function_body ; .)
    DOT_QUOTE       reduce using rule 14 (function -> : WORD function_body ; .)
    CHAR            reduce using rule 14 (function -> : WORD function_body ; .)
    EMIT            reduce using rule 14 (function -> : WORD function_body ; .)
    DUP             reduce using rule 14 (function -> : WORD function_body ; .)
    SWAP            reduce using rule 14 (function -> : WORD function_body ; .)
    CR              reduce using rule 14 (function -> : WORD function_body ; .)
    KEY             reduce using rule 14 (function -> : WORD function_body ; .)
    DROP            reduce using rule 14 (function -> : WORD function_body ; .)
    WORD            reduce using rule 14 (function -> : WORD function_body ; .)
    INT             reduce using rule 14 (function -> : WORD function_body ; .)
    FLOAT           reduce using rule 14 (function -> : WORD function_body ; .)
    $end            reduce using rule 14 (function -> : WORD function_body ; .)
    THEN            reduce using rule 14 (function -> : WORD function_body ; .)
    ELSE            reduce using rule 14 (function -> : WORD function_body ; .)
    ;               reduce using rule 14 (function -> : WORD function_body ; .)


state 38

    (12) condition_construct -> comparison IF statements ELSE statements . THEN

    THEN            shift and go to state 41


state 39

    (16) arguments -> arguments WORD .

    DOUBLE_HIFEN    reduce using rule 16 (arguments -> arguments WORD .)
    WORD            reduce using rule 16 (arguments -> arguments WORD .)


state 40

    (13) function -> : WORD ( arguments DOUBLE_HIFEN . WORD ) function_body ;

    WORD            shift and go to state 42


state 41

    (12) condition_construct -> comparison IF statements ELSE statements THEN .

    :               reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    ARITHMETIC_OP   reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    COMPARISON      reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    DOT             reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    DOT_QUOTE       reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    CHAR            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    EMIT            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    DUP             reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    SWAP            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    CR              reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    KEY             reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    DROP            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    WORD            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    INT             reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    FLOAT           reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    $end            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    THEN            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    ELSE            reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)
    ;               reduce using rule 12 (condition_construct -> comparison IF statements ELSE statements THEN .)


state 42

    (13) function -> : WORD ( arguments DOUBLE_HIFEN WORD . ) function_body ;

    )               shift and go to state 43


state 43

    (13) function -> : WORD ( arguments DOUBLE_HIFEN WORD ) . function_body ;
    (15) function_body -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . function
    (5) statement -> . condition_construct
    (6) statement -> . operation
    (7) statement -> . comparison
    (8) statement -> . forth_function
    (9) statement -> . words
    (10) statement -> . num
    (13) function -> . : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ;
    (14) function -> . : WORD function_body ;
    (11) condition_construct -> . comparison IF statements THEN
    (12) condition_construct -> . comparison IF statements ELSE statements THEN
    (18) operation -> . ARITHMETIC_OP
    (19) comparison -> . COMPARISON
    (23) forth_function -> . DOT
    (24) forth_function -> . DOT_QUOTE
    (25) forth_function -> . CHAR
    (26) forth_function -> . EMIT
    (27) forth_function -> . DUP
    (28) forth_function -> . SWAP
    (29) forth_function -> . CR
    (30) forth_function -> . KEY
    (31) forth_function -> . DROP
    (22) words -> . WORD
    (20) num -> . INT
    (21) num -> . FLOAT

    :               shift and go to state 11
    ARITHMETIC_OP   shift and go to state 13
    COMPARISON      shift and go to state 14
    DOT             shift and go to state 15
    DOT_QUOTE       shift and go to state 16
    CHAR            shift and go to state 17
    EMIT            shift and go to state 18
    DUP             shift and go to state 19
    SWAP            shift and go to state 20
    CR              shift and go to state 21
    KEY             shift and go to state 22
    DROP            shift and go to state 23
    WORD            shift and go to state 12
    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    function_body                  shift and go to state 44
    statements                     shift and go to state 32
    statement                      shift and go to state 3
    function                       shift and go to state 4
    condition_construct            shift and go to state 5
    operation                      shift and go to state 6
    comparison                     shift and go to state 7
    forth_function                 shift and go to state 8
    words                          shift and go to state 9
    num                            shift and go to state 10

state 44

    (13) function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body . ;

    ;               shift and go to state 45


state 45

    (13) function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .

    :               reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    ARITHMETIC_OP   reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    COMPARISON      reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    DOT             reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    DOT_QUOTE       reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    CHAR            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    EMIT            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    DUP             reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    SWAP            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    CR              reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    KEY             reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    DROP            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    WORD            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    INT             reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    FLOAT           reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    $end            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    THEN            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    ELSE            reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)
    ;               reduce using rule 13 (function -> : WORD ( arguments DOUBLE_HIFEN WORD ) function_body ; .)

