
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ABS ID MAX MIN MOD NEGATE NEWLINE NUM VARIABLE\n    S : Expression '$'\n    \n    Expression : Expression ArithmeticOp\n               | Expression Literal\n               | '$'\n    \n    ArithmeticOp : '+'\n                 | '-'\n                 | '*'\n                 | '/'\n                 | NEGATE\n    \n    Literal : NUM\n    "
    
_lr_action_items = {'$':([0,2,3,5,6,7,8,9,10,11,12,],[3,4,-4,-2,-3,-5,-6,-7,-8,-9,-10,]),'$end':([1,4,],[0,-1,]),'+':([2,3,5,6,7,8,9,10,11,12,],[7,-4,-2,-3,-5,-6,-7,-8,-9,-10,]),'-':([2,3,5,6,7,8,9,10,11,12,],[8,-4,-2,-3,-5,-6,-7,-8,-9,-10,]),'*':([2,3,5,6,7,8,9,10,11,12,],[9,-4,-2,-3,-5,-6,-7,-8,-9,-10,]),'/':([2,3,5,6,7,8,9,10,11,12,],[10,-4,-2,-3,-5,-6,-7,-8,-9,-10,]),'NEGATE':([2,3,5,6,7,8,9,10,11,12,],[11,-4,-2,-3,-5,-6,-7,-8,-9,-10,]),'NUM':([2,3,5,6,7,8,9,10,11,12,],[12,-4,-2,-3,-5,-6,-7,-8,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'S':([0,],[1,]),'Expression':([0,],[2,]),'ArithmeticOp':([2,],[5,]),'Literal':([2,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> Expression $','S',2,'p_S','parser.py',15),
  ('Expression -> Expression ArithmeticOp','Expression',2,'p_expression','parser.py',21),
  ('Expression -> Expression Literal','Expression',2,'p_expression','parser.py',22),
  ('Expression -> $','Expression',1,'p_expression','parser.py',23),
  ('ArithmeticOp -> +','ArithmeticOp',1,'p_arithmeticop','parser.py',29),
  ('ArithmeticOp -> -','ArithmeticOp',1,'p_arithmeticop','parser.py',30),
  ('ArithmeticOp -> *','ArithmeticOp',1,'p_arithmeticop','parser.py',31),
  ('ArithmeticOp -> /','ArithmeticOp',1,'p_arithmeticop','parser.py',32),
  ('ArithmeticOp -> NEGATE','ArithmeticOp',1,'p_arithmeticop','parser.py',33),
  ('Literal -> NUM','Literal',1,'p_literal','parser.py',40),
]
